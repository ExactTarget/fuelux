{
  "name": "js-yaml",
  "version": "0.3.5",
  "description": "YAML 1.1 Parser",
  "keywords": [
    "yaml",
    "parser",
    "pyyaml"
  ],
  "homepage": "https://github.com/nodeca/js-yaml",
  "author": {
    "name": "Aleksey V Zapparov",
    "email": "ixti@member.fsf.org",
    "url": "http://www.ixti.net/"
  },
  "contributors": [
    {
      "name": "Martin Grenfell",
      "email": "martin.grenfell@gmail.com",
      "url": "http://got-ravings.blogspot.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/nodeca/js-yaml/issues"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/nodeca/js-yaml/blob/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nodeca/js-yaml.git"
  },
  "main": "./index.js",
  "scripts": {
    "test": "make test"
  },
  "devDependencies": {
    "vows": "~ 0.6.0",
    "jslint": "https://github.com/reid/node-jslint/tarball/6131ebf5713274871b89735105e3286131804771"
  },
  "engines": {
    "node": "> 0.4.11"
  },
  "readme": "JS-YAML - YAML 1.1 parser for JavaScript\n========================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\nThis is a native port of [PyYAML](http://pyyaml.org/), the most advanced YAML parser.\nNow you can use all modern YAML feature right in JavaScript. Originally snapshoted version - PyYAML 3.10 (2011-05-30).\n\n## Installation\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\nIf you want to inspect your YAML files from CLI,\ninstall [js-yaml.bin](https://github.com/nodeca/js-yaml.bin).\n\n\n### bundled YAML library for browser\n\n``` html\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nAlso we support AMD loaders, e.g. [RequireJS](http://requirejs.org/).\n\n## API\n\nJS-YAML automatically registers handlers for `.yml` and `.yaml` files. You can load them just with `require`.\nThat's mostly equivalent to calling loadAll() on file handler ang gathering all documents into array.\nJust with one string!\n\n``` javascript\nrequire('js-yaml');\n\n// Get array of documents, or throw exception on error\nvar docs = require('/home/ixti/examples.yml');\n\nconsole.log(docs);\n```\n\nIf you are sure, that file has only one document, chained `shift()` will help to exclude array wrapper:\n\n``` javascript\nrequire('js-yaml');\n\n// Get array of documents, or throw exception on error\nvar singleDoc = require('/home/ixti/examples.yml').shift();\n\nconsole.log(singleDoc);\n```\n\n\n### load (string|buffer|file\\_resource)\n\nParses source as single YAML document. Returns JS object or throws exception on error.\n\nThis function does NOT understands multi-doc sources, it throws exception on those.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n  try {\n    console.log( yaml.load(data) );\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### loadAll (string|buffer|file\\_resource, iterator)\n\nSame as `Load`, but understands multi-doc sources and apply iterator to each document.\n\n``` javascript\nvar yaml = require('js-yaml');\n\n// pass the string\nfs.readFile('/home/ixti/example.yml', 'utf8', function (err, data) {\n  if (err) {\n    // handle error\n    return;\n  }\n\n  try {\n    yaml.loadAll(data, function (doc) {\n      console.log(doc);\n    });\n  } catch(e) {\n    console.log(e);\n  }\n});\n```\n\n\n### safeLoad (string|buffer|file\\_resource)\n\nSame as `load()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string|buffer|file\\_resource, iterator)\n\nSame as `loadAll()` but uses _safe_ schema - only recommended tags of YAML\nspecification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n## JavaScript YAML tags scheme\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML Tag Discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and [Yaml Types](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\n### Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies them at the moment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n=>\n\n``` javascript\n{ \"\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file (MIT).\n",
  "_id": "js-yaml@0.3.5",
  "_from": "js-yaml@0.3.5"
}
