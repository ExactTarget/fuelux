{
  "name": "set",
  "description": "An implementation of Sets in JavaScript",
  "version": "1.0.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/gkatsev/set.js.git"
  },
  "author": {
    "name": "Gary Katsevman",
    "email": "me@gkatsev.com",
    "url": "gkatsev.com"
  },
  "main": "set",
  "directories": {
    "lib": "."
  },
  "scripts": {
    "test": "vows tests.js"
  },
  "engines": {
    "node": "*"
  },
  "readme": "# Set.js  \n  \nI created this because I noticed that there were no actual set object implementations in JavaScript and also to learn a bit more about creating node modules.  \n  \n## Usage  \n  \nCreate an array of items and then pass it to Set.  \n`var Set = require('./set')`  \n`var set = new Set([0,1,1])`  \nAnd then when we get it  \n`set.get() // [0,1]`  \n  \n## API  \nThere are various Set functions available  \n  \n### Static functions  \n`Set#unique` given an array, return an array with all duplicates removed.  \n  \n### Instance functions  \n`Set#contains` return whether a given property is available.  \n`Set#empty` return whether the set in empty.  \n`Set#size` return the size of the Set.  \n`Set#get` return the set as an Array.  \n  \n`Set#add` add an item to the Set.  \n`Set#remove` remove an item from the set.  \n`Set#clear` remove all items from the set.  \n  \n`Set#union` return a new set that is the union of the set with another one.  \n`Set#intersect` return a new set that is the intersection of the set with another one.  \n`Set#difference` return a new set that is the difference of the set with another one.  \n  \n`Set#find` return an array with all items that match the predicate.  \n",
  "_id": "set@1.0.0",
  "_from": "set@~1.0.0"
}
