{
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "name": "fast-list",
  "description": "A fast linked list (good for queues, stacks, etc.)",
  "version": "1.0.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/fast-list.git"
  },
  "main": "fast-list.js",
  "dependencies": {},
  "devDependencies": {
    "bench": "~0.3.2",
    "tap": "~0.1.0"
  },
  "scripts": {
    "test": "tap test.js",
    "bench": "node bench.js"
  },
  "readme": "# The Problem\n\nYou've got some thing where you need to push a bunch of stuff into a\nqueue and then shift it out.  Or, maybe it's a stack, and you're just\npushing and popping it.\n\nArrays work for this, but are a bit costly performance-wise.\n\n# The Solution\n\nA linked-list implementation that takes advantage of what v8 is good at:\ncreating objects with a known shape.\n\nThis is faster for this use case.  How much faster?  About 50%.\n\n    $ node bench.js\n    benchmarking /Users/isaacs/dev-src/js/fast-list/bench.js\n    Please be patient.\n    { node: '0.6.2-pre',\n      v8: '3.6.6.8',\n      ares: '1.7.5-DEV',\n      uv: '0.1',\n      openssl: '0.9.8l' }\n    Scores: (bigger is better)\n\n    new FastList()\n    Raw:\n     > 22556.39097744361\n     > 23054.755043227666\n     > 22770.398481973436\n     > 23414.634146341465\n     > 23099.133782483157\n    Average (mean) 22979.062486293868\n\n    []\n    Raw:\n     > 12195.121951219513\n     > 12184.508268059182\n     > 12173.91304347826\n     > 12216.404886561955\n     > 12184.508268059182\n    Average (mean) 12190.891283475617\n\n    new Array()\n    Raw:\n     > 12131.715771230503\n     > 12184.508268059182\n     > 12216.404886561955\n     > 12195.121951219513\n     > 11940.298507462687\n    Average (mean) 12133.609876906768\n\n    Winner: new FastList()\n    Compared with next highest ([]), it's:\n    46.95% faster\n    1.88 times as fast\n    0.28 order(s) of magnitude faster\n\n    Compared with the slowest (new Array()), it's:\n    47.2% faster\n    1.89 times as fast\n    0.28 order(s) of magnitude faster\n\nThis lacks a lot of features that arrays have:\n\n1. You can't specify the size at the outset.\n2. It's not indexable.\n3. There's no join, concat, etc.\n\nIf any of this matters for your use case, you're probably better off\nusing an Array object.\n\n## Installing\n\n```\nnpm install fast-list\n```\n\n## API\n\n```javascript\nvar FastList = require(\"fast-list\")\nvar list = new FastList()\nlist.push(\"foo\")\nlist.unshift(\"bar\")\nlist.push(\"baz\")\nconsole.log(list.length) // 2\nconsole.log(list.pop()) // baz\nconsole.log(list.shift()) // bar\nconsole.log(list.shift()) // foo\n```\n\n### Methods\n\n* `push`: Just like Array.push, but only can take a single entry\n* `pop`: Just like Array.pop\n* `shift`: Just like Array.shift\n* `unshift`: Just like Array.unshift, but only can take a single entry\n* `drop`: Drop all entries\n* `item(n)`: Retrieve the nth item in the list.  This involves a walk\n  every time.  It's very slow.  If you find yourself using this,\n  consider using a normal Array instead.\n* `slice(start, end)`: Retrieve an array of the items at this position.\n  This involves a walk every time.  It's very slow.  If you find\n  yourself using this, consider using a normal Array instead.\n\n### Members\n\n* `length`: The number of things in the list.  Note that, unlike\n  Array.length, this is not a getter/setter, but rather a counter that\n  is internally managed.  Setting it can only cause harm.\n",
  "_id": "fast-list@1.0.2",
  "_from": "fast-list@1"
}
