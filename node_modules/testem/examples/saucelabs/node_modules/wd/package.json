{
  "name": "wd",
  "description": "WebDriver/Selenium 2 node.js client",
  "tags": [
    "web",
    "automation",
    "browser",
    "javascript"
  ],
  "version": "0.0.26",
  "author": {
    "name": "Adam Christian",
    "email": "adam.christian@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/admc/wd.git"
  },
  "bugs": {
    "url": "https://github.com/admc/wd/issues"
  },
  "engines": [
    "node"
  ],
  "main": "./lib/main",
  "bin": {
    "wd": "./lib/bin.js"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "async": "0.1.x"
  },
  "devDependencies": {
    "mocha": "1.6.x",
    "should": "1.2.x",
    "coffee-script": "1.3.x",
    "express": "3.x",
    "imageinfo": "1.0.x",
    "covershot": "0.1.x",
    "nock": "0.13.x",
    "dox": "0.3.x",
    "mu2": "0.5.x",
    "underscore": "1.4.x"
  },
  "scripts": {
    "test": "make test_saucelabs"
  },
  "readme": "# WD.js -- A light weight WebDriver/Se2 client for node.js\n\n[![Build Status](https://secure.travis-ci.org/admc/wd.png?branch=master)](http://travis-ci.org/admc/wd)\n\n## Update node to latest\n\nhttp://nodejs.org/#download\n\n## Install\n\n<pre>\nnpm install wd\n</pre>\n\n## Authors\n\n  - Adam Christian ([admc](http://github.com/admc))\n  - Ruben Daniels ([javruben](https://github.com/javruben))\n  - Peter Braden ([peterbraden](https://github.com/peterbraden))\n  - Seb Vincent ([sebv](https://github.com/sebv))\n  - Peter 'Pita' Martischka ([pita](https://github.com/Pita))\n  - Jonathan Lipps ([jlipps](https://github.com/jlipps))\n  - Phil Sarin ([pdsarin](https://github.com/pdsarin))\n  - Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n  - Bjorn Tipling ([btipling](https://github.com/btipling))\n  \n## License\n\n  * License - Apache 2: http://www.apache.org/licenses/LICENSE-2.0\n\n## Usage\n\n<pre>\n): wd shell\n> x = wd.remote() or wd.remote(\"ondemand.saucelabs.com\", 80, \"username\", \"apikey\")\n\n> x.init() or x.init({desired capabilities ovveride})\n> x.get(\"http://www.url.com\")\n> x.eval(\"window.location.href\", function(e, o) { console.log(o) })\n> x.quit()\n</pre>\n\n\n## Writing a test!\n\n<pre>\nvar webdriver = require('wd')\n  , assert = require('assert');\n\nvar browser = webdriver.remote();\n\nbrowser.on('status', function(info){\n  console.log('\\x1b[36m%s\\x1b[0m', info);\n});\nbrowser.on('command', function(meth, path){\n  console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n});\n\ndesired = {\n  browserName:'chrome'\n  , tags: [\"examples\"]\n  , name: \"This is an example test\"\n}\n\nbrowser.init(desired, function() {\n  browser.get(\"http://saucelabs.com/test/guinea-pig\", function() {\n    browser.title(function(err, title) {\n      assert.ok(~title.indexOf('I am a page title - Sauce Labs'), 'Wrong title!');\n      browser.elementById('submit', function(err, el) {\n        browser.clickElement(el, function() {\n          browser.eval(\"window.location.href\", function(err, title) {\n            assert.ok(~title.indexOf('#'), 'Wrong title!');\n            browser.quit()\n          })\n        })\n      })\n    })\n  })\n})\n</pre>\n\n## Supported Methods\n\n<table class=\"wikitable\">\n  <tbody>\n    <tr>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>JsonWireProtocol</strong>\n      </td>\n      <td width=\"50%\" style=\"border: 1px solid #ccc; padding: 5px;\">\n        <strong>wd</strong>\n      </td>\n    </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/status\">/status</a><br>\n            Query the server's current status.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              status(cb) -&gt; cb(err, status)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session\">/session</a><br>\n            Create a new session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              init(desired, cb) -&gt; cb(err, sessionID)<br>\n            \n              Initialize the browser.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/sessions\">/sessions</a><br>\n            Returns a list of the currently active sessions.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                sessions(cb) -&gt; cb(err, sessions)<br>\n              \n            </p>\n          \n            <p>\n              \n                Alternate strategy to get session capabilities from server session list: <br>\n              \n                altSessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId\">/session/:sessionId</a><br>\n            Retrieve the capabilities of the specified session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              sessionCapabilities(cb) -&gt; cb(err, capabilities)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId\">/session/:sessionId</a><br>\n            Delete the session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              quit(cb) -&gt; cb(err)<br>\n            \n              Destroy the browser.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts\">/session/:sessionId/timeouts</a><br>\n            Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setPageLoadTimeout(ms, cb) -&gt; cb(err)<br>\n            \n              (use setImplicitWaitTimeout and setAsyncScriptTimeout to set the other timeouts)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/async_script\">/session/:sessionId/timeouts/async_script</a><br>\n            Set the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async are permitted to run before they are aborted and a |Timeout| error is returned to the client.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setAsyncScriptTimeout(ms, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/timeouts/implicit_wait\">/session/:sessionId/timeouts/implicit_wait</a><br>\n            Set the amount of time the driver should wait when searching for elements.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setImplicitWaitTimeout(ms, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handle\">/session/:sessionId/window_handle</a><br>\n            Retrieve the current window handle.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowHandle(cb) -&gt; cb(err, handle)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/window_handles\">/session/:sessionId/window_handles</a><br>\n            Retrieve the list of all window handles available to the session.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowHandles(cb) -&gt; cb(err, arrayOfHandles)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n            Retrieve the URL of the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              url(cb) -&gt; cb(err, url)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/url\">/session/:sessionId/url</a><br>\n            Navigate to a new URL.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              get(url,cb) -&gt; cb(err)<br>\n            \n              Get a new url.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/forward\">/session/:sessionId/forward</a><br>\n            Navigate forwards in the browser history, if possible.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              forward(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/back\">/session/:sessionId/back</a><br>\n            Navigate backwards in the browser history, if possible.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              back(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/refresh\">/session/:sessionId/refresh</a><br>\n            Refresh the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              refresh(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute\">/session/:sessionId/execute</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                execute(code, args, cb) -&gt; cb(err, result)<br>\n              \n                execute(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Execute script using eval(code): <br>\n              \n                safeExecute(code, args, cb) -&gt; cb(err, result)<br>\n              \n                safeExecute(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Evaluate expression (using execute): <br>\n              \n                eval(code, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                Evaluate expression (using safeExecute): <br>\n              \n                safeEval(code, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/execute_async\">/session/:sessionId/execute_async</a><br>\n            Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                executeAsync(code, args, cb) -&gt; cb(err, result)<br>\n              \n                executeAsync(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                Execute async script using eval(code): <br>\n              \n                safeExecuteAsync(code, args, cb) -&gt; cb(err, result)<br>\n              \n                safeExecuteAsync(code, cb) -&gt; cb(err, result)<br>\n              \n                args: script argument array (optional)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/screenshot\">/session/:sessionId/screenshot</a><br>\n            Take a screenshot of the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              takeScreenshot(cb) -&gt; cb(err, screenshot)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/frame\">/session/:sessionId/frame</a><br>\n            Change focus to another frame on the page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              frame(frameRef, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n            Change focus to another window.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              window(name, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/window\">/session/:sessionId/window</a><br>\n            Close the current window.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              close(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Retrieve all cookies visible to the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              allCookies() -&gt; cb(err, cookies)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Set a cookie.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              setCookie(cookie, cb) -&gt; cb(err)<br>\n            \n              cookie example:  <br>\n            \n               {name:'fruit', value:'apple'}<br>\n            \n              Optional cookie fields: <br>\n            \n               path, domain, secure, expiry<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie\">/session/:sessionId/cookie</a><br>\n            Delete all cookies visible to the current page.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              deleteAllCookies(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            DELETE <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#DELETE_/session/:sessionId/cookie/:name\">/session/:sessionId/cookie/:name</a><br>\n            Delete the cookie with the given name.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              deleteCookie(name, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/title\">/session/:sessionId/title</a><br>\n            Get the current page title.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              title(cb) -&gt; cb(err, title)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element\">/session/:sessionId/element</a><br>\n            Search for an element on the page, starting from the document root.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                element(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelector(value, cb) -&gt; cb(err, element)<br>\n              \n                elementById(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkText(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkText(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagName(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPath(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCss(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/elements\">/session/:sessionId/elements</a><br>\n            Search for multiple elements on the page, starting from the document root.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                elements(using, value, cb) -&gt; cb(err, elements)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementsByClassName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByCssSelector(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsById(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByLinkText(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByPartialLinkText(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByTagName(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByXPath(value, cb) -&gt; cb(err, elements)      <br>\n              \n                elementsByCss(value, cb) -&gt; cb(err, elements)      <br>\n              \n            </p>\n          \n            <p>\n              \n                Retrieve an element avoiding not found exception and returning null instead: <br>\n              \n                elementOrNull(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelectorOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByIdOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkTextOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagNameOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPathOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssOrNull(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                Retrieve an element avoiding not found exception and returning undefined instead: <br>\n              \n                elementIfExists(using, value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                elementByClassNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssSelectorIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByIdIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByPartialLinkTextIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByTagNameIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByXPathIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n                elementByCssIfExists(value, cb) -&gt; cb(err, element)<br>\n              \n            </p>\n          \n            <p>\n              \n                Check if element exists: <br>\n              \n                hasElement(using, value, cb) -&gt; cb(err, boolean)<br>\n              \n            </p>\n          \n            <p>\n              \n                hasElementByClassName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByCssSelector(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementById(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByLinkText(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByPartialLinkText(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByTagName(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByXPath(value, cb) -&gt; cb(err, boolean) <br>\n              \n                hasElementByCss(value, cb) -&gt; cb(err, boolean) <br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/active\">/session/:sessionId/element/active</a><br>\n            Get the element on the page that currently has focus.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              active(cb) -&gt; cb(err, element)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click\">/session/:sessionId/element/:id/click</a><br>\n            Click on an element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                clickElement(element, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.click(cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text\">/session/:sessionId/element/:id/text</a><br>\n            Returns the visible text for the element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                text(element, cb) -&gt; cb(err, text)<br>\n              \n                element: specific element, 'body', or undefined<br>\n              \n            </p>\n          \n            <p>\n              \n                element.text(cb) -&gt; cb(err, text)<br>\n              \n            </p>\n          \n            <p>\n              \n                Check if text is present: <br>\n              \n                textPresent(searchText, element, cb) -&gt; cb(err, boolean)<br>\n              \n                element: specific element, 'body', or undefined<br>\n              \n                 <br>\n              \n            </p>\n          \n            <p>\n              \n                element.textPresent(searchText, cb) -&gt; cb(err, boolean)<br>\n              \n                 <br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value\">/session/:sessionId/element/:id/value</a><br>\n            Send a sequence of key strokes to an element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                type(element, keys, cb) -&gt; cb(err)<br>\n              \n                Type keys (all keys are up at the end of command).<br>\n              \n                special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.type(keys, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/keys\">/session/:sessionId/keys</a><br>\n            Send a sequence of key strokes to the active element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              keys(keys, cb) -&gt; cb(err)<br>\n            \n              Press keys (keys may still be down at the end of command).<br>\n            \n              special key map: wd.SPECIAL_KEYS (see lib/special-keys.js)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/name\">/session/:sessionId/element/:id/name</a><br>\n            Query for an element's tag name.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getTagName(element, cb) -&gt; cb(err, name)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getTagName(cb) -&gt; cb(err, name)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear\">/session/:sessionId/element/:id/clear</a><br>\n            Clear a TEXTAREA or text INPUT element's value.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                clear(element, cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.clear(cb) -&gt; cb(err)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name\">/session/:sessionId/element/:id/attribute/:name</a><br>\n            Get the value of an element's attribute.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getAttribute(element, attrName, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getAttribute(attrName, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                Get element value (in value attribute): <br>\n              \n                getValue(element, cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getValue(cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed\">/session/:sessionId/element/:id/displayed</a><br>\n            Determine if an element is currently displayed.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                isDisplayed(element, cb) -&gt; cb(err, displayed)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.isDisplayed(cb) -&gt; cb(err, displayed)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            GET <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName\">/session/:sessionId/element/:id/css/:propertyName</a><br>\n            Query the value of an element's computed CSS property.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n          \n            <p>\n              \n                getComputedCss(element, cssProperty , cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n            <p>\n              \n                element.getComputedCss(cssProperty , cb) -&gt; cb(err, value)<br>\n              \n            </p>\n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/accept_alert\">/session/:sessionId/accept_alert</a><br>\n            Accepts the currently displayed alert dialog.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              acceptAlert(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/dismiss_alert\">/session/:sessionId/dismiss_alert</a><br>\n            Dismisses the currently displayed alert dialog.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              dismissAlert(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/moveto\">/session/:sessionId/moveto</a><br>\n            Move the mouse by an offset of the specificed element.\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              moveTo(element, xoffset, yoffset, cb) -&gt; cb(err)<br>\n            \n              Move to element, xoffset and y offset are optional.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/click\">/session/:sessionId/click</a><br>\n            Click any mouse button (at the coordinates set by the last moveto command).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              click(button, cb) -&gt; cb(err)<br>\n            \n              Click on current element.<br>\n            \n              Buttons: {left: 0, middle: 1 , right: 2}<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttondown\">/session/:sessionId/buttondown</a><br>\n            Click and hold the left mouse button (at the coordinates set by the last moveto command).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              buttonDown(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/buttonup\">/session/:sessionId/buttonup</a><br>\n            Releases the mouse button previously held (where the mouse is currently at).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              buttonUp(cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n            POST <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/doubleclick\">/session/:sessionId/doubleclick</a><br>\n            Double-clicks at the current mouse coordinates (set by moveto).\n          \n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              doubleclick(cb) -&gt; cb(err) <br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Opens a new window (using Javascript window.open):<br>\n            \n              newWindow(url, name, cb) -&gt; cb(err)<br>\n            \n              newWindow(url, cb) -&gt; cb(err)<br>\n            \n              name: optional window name<br>\n            \n              Window can later be accessed by name with the window method, <br>\n            \n              or by getting the last handle returned by the windowHandles method.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              windowName(cb) -&gt; cb(err, name)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForElement(using, value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForVisible(using, value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForElementByClassName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementById(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByTagName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByXPath(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForElementByCss(value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              waitForVisibleByClassName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByCssSelector(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleById(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByPartialLinkText(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByTagName(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByXPath(value, timeout, cb) -&gt; cb(err)<br>\n            \n              waitForVisibleByCss(value, timeout, cb) -&gt; cb(err)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              isVisible(element , cb) -&gt; cb(err, boolean)<br>\n            \n              deprecated: isVisible(queryType, querySelector, cb) -&gt; cb(err, boolean)<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Waits for JavaScript condition to be true (polling within wd client): <br>\n            \n              waitForCondition(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForCondition(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForCondition(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n            \n              conditionExpr: condition expression, should return a boolean<br>\n            \n              timeout: timeout (optional, default: 1000) <br>\n            \n              pollFreq: pooling frequency (optional, default: 100)<br>\n            \n              return true if condition satisfied, error otherwise.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              Waits for JavaScript condition to be true (async script polling within browser): <br>\n            \n              waitForConditionInBrowser(conditionExpr, timeout, pollFreq, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForConditionInBrowser(conditionExpr, timeout, cb) -&gt; cb(err, boolean)<br>\n            \n              waitForConditionInBrowser(conditionExpr, cb) -&gt; cb(err, boolean)<br>\n            \n              conditionExpr: condition expression, should return a boolean<br>\n            \n              timeout: timeout (optional, default: 1000) <br>\n            \n              pollFreq: pooling frequency (optional, default: 100)<br>\n            \n              return true if condition satisfied, error otherwise.<br>\n            \n          \n          \n        </td>\n      </tr>\n    \n      <tr>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            EXTRA\n          \n          \n        </td>\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">\n          \n          \n            \n              isVisible(cb) -&gt; cb(err, boolean)<br>\n            \n          \n          \n        </td>\n      </tr>\n      \n  </tbody>\n</table>\n\n### Full JsonWireProtocol mapping:\n\n[supported mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-mapping.md)\n\n[full mapping](https://github.com/admc/wd/blob/master/doc/jsonwire-full-mapping.md)\n\n\n## More docs!\n<pre>\nWD is simply implementing the Selenium JsonWireProtocol, for more details see the official docs:\n - <a href=\"http://code.google.com/p/selenium/wiki/JsonWireProtocol\">http://code.google.com/p/selenium/wiki/JsonWireProtocol</a>\n</pre>\n\n## Run the tests!\n<pre>\n  - Run the selenium server with chromedriver: \n      java -jar selenium-server-standalone-2.21.0.jar -Dwebdriver.chrome.driver=&lt;PATH&gt;/chromedriver\n  - cd wd\n  - npm install .\n  - make test\n  - look at the results!\n</pre>\n\n## Run the tests on Sauce Labs cloud!\n<pre>\n  - cd wd\n  - npm install .\n  - make test_saucelabs\n</pre>\n\n## Test Coverage\n\n[test coverage](http://admc.io/wd/coverage.html)\n",
  "_id": "wd@0.0.26",
  "dist": {
    "shasum": "799bb649dff34aed677a19c0ce6e54630c08a917"
  },
  "_from": "wd"
}
