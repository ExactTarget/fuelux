{
  "author": {
    "name": "Dan Jenkins",
    "email": "dan.jenkins@holidayextras.com",
    "url": "www.dan-jenkins.co.uk"
  },
  "name": "saucelabs",
  "description": "A wrapper around Saucelabs REST API",
  "version": "0.0.7",
  "homepage": "https://github.com/holidayextras/node-saucelabs",
  "repository": {
    "type": "git",
    "url": "git://github.com/holidayextras/node-saucelabs.git"
  },
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# node-saucelabs -- Node wrapper around the Saucelabs REST API\n\n## Download or update node\n\nhttp://nodejs.org/#download\n\n## Install\n\n```shell\nnpm install saucelabs\n```\n\n## Authors\n\n- Dan Jenkins ([danjenkins](https://github.com/danjenkins))\n- Mathieu Sabourin ([OniOni](https://github.com/OniOni))\n\n## Writting a script\n\n```javascript\nvar sauce = require('saucelabs');\n\nvar myAccount = new sauce({\n    username: \"your-sauce-username\",\n    password: \"your-sauce-api-key\",\n})\n\nmyAccount.getAccountDetails( function (err, res) {\n    console.log(res);\n    myAccount.getServiceStatus( function (err, res) {\n\t//Status of the Sauce Labs services\n\tconsole.log(res);\n\tmyAccount.getBrowsers( function (err, res) {\n\t    //List of all browser/os combinations currently supported on Sauce Labs.\n\t    console.log(res);\n\t    myAccount.getJobs( function (err, res) {\n\t\t//Get a list of all your jobs\n\t\tfor (k in jobs) {\n\t\t    myAccount.showJob(jobs[k].id, function (err, res) {\n\t\t\tvar str = res.id +\": Status: \"+ res.status;\n\t\t\tif (res.error) {\n\t\t\t    str += \"\\033[31m Error: \"+res.error+\" \\033[0m\";\n\t\t\t}\n\t\t\tconsole.log(str);\n\t\t    })\n\t\t}\n\t    })\n\t})\n    })\n});\n```\n\n## Supported Methods\n\n<table class=\"wikitable\" width=\"90%\" style=\"padding: 5%;\">\n  <tbody>\n    <tr >\n      <td width=\"50%\"><strong>Rest</strong></td>\n      <td width=\"50%\"><strong>Node Wrapper</strong></td>\n    </tr>\n    <tr>\n      <td>\n\tGET /users/:username <br />\n\tAccess account details.\n      </td>\n      <td>getAccountDetails(cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tGET /:username/limits <br />\n\tAccess account details\n      </td>\n      <td> getAccountLimits(cb) -> cb(err, res) </td>\n    </tr>\n    <tr>\n      <td>\n\tGET /:username/activity <br />\n\tAccess current account activity.\n      </td>\n      <td>getUserActivity(cb, start, end) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tGET /users/:username/usage <br />\n\tAccess historical account usage data.\n      </td>\n      <td> getAccountUsage(cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tGET /:username/jobs <br />\n\tList all job Id's belonging to a given user. \n      </td>\n      <td>getJobs(cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tGET /:username/jobs/:id <br />\n\tShow the full information for a job given its ID. \n      </td>\n      <td>showJob(id, cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tPUT /:username/jobs/:id <br />\n\tChanges a pre-existing job. \n      </td>\n      <td>updateJob(id, data, cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tPUT /:username/jobs/:id/stop <br />\n\tTerminates a running job. \n      </td>\n      <td>stopJob(id, data, cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tGET /:username/tunnels <br />\n\tRetrieves all running tunnels for a given user. \n      </td>\n      <td>getActiveTunnels(cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tGET /:username/tunnels/:id <br />\n\tShow the full information for a tunnel given its ID. \n      </td>\n      <td>getTunnel(id, cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tDELETE /:username/tunnels/:id <br />\n\tShuts down a tunnel given its ID. \n      </td>\n      <td>deleteTunnel(id, cb) -> cb(err, res)</td> <br />\n    </tr>\n    <tr>\n      <td>\n\tGET /info/status <br />\n\tReturns the current status of Sauce Labs' services. \n      </td>\n      <td>getServicesStatus(cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tGET /info/browsers <br />\n\tReturns an array of strings corresponding to all the browsers currently supported on Sauce Labs. \n      </td>\n      <td>getBrowsers(cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tGET /info/counter <br />\n\tReturns the number of test executed so far on Sauce Labs. \n      </td>\n      <td>getTestCounter(cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>\n\tPOST /users/:id <br />\n\tCreate a new sub-account, specifying a Sauce Labs service plan.\n      </td>\n      <td>createSubAccount(data, cb) -> cb(err, res)</td>\n    </tr>\n    <tr>\n      <td>POST /users/:id/subscription</td>\n      <td> ... </td>\n    </tr>\n    <tr>\n      <td>\n  Make a public link to a private job, no need to login\n      </td>\n      <td>createPublicLink(job_id, datetime, use_hour, cb) -> cb(err, url)<br />\n        createPublicLink(job_id, datetime, cb) -> cb(err, url)<br />\n        createPublicLink(job_id, cb) -> cb(err, url)</td>\n    </tr>\n  </tbody>\n</table>\n\t\n## More Documentation\n\nCheck out the [Sauce REST API](http://saucelabs.com/docs/saucerest)\nfor more information\n",
  "_id": "saucelabs@0.0.7",
  "dist": {
    "shasum": "2039bc5ce74614fc155177c6b2d298c0a9962001"
  },
  "_from": "saucelabs"
}
